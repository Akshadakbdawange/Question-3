{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "5fbd3b04-e542-40de-bc34-d9de8ac428d9",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Matrix U:\n",
      "[[-2.61035559e-01  1.41661282e-01 -6.52143620e-01  5.81405783e-01\n",
      "  -3.85316146e-01]\n",
      " [-5.97862076e-01 -6.62950501e-01 -3.13331488e-03  1.66966569e-01\n",
      "   4.18533055e-01]\n",
      " [-2.99543846e-01  5.75781305e-01 -3.68704057e-01 -2.92090847e-01\n",
      "   5.97904364e-01]\n",
      " [-5.82166994e-01  2.16244886e-02  5.22772469e-02 -5.82244914e-01\n",
      "  -5.64687455e-01]\n",
      " [-3.81806823e-01  4.56548994e-01  6.60320595e-01  4.57999211e-01\n",
      "  -3.60822483e-16]]\n",
      "\n",
      "Matrix Σ:\n",
      "[[2.34825376e+01 0.00000000e+00 0.00000000e+00 0.00000000e+00\n",
      "  0.00000000e+00]\n",
      " [0.00000000e+00 8.61922422e+00 0.00000000e+00 0.00000000e+00\n",
      "  0.00000000e+00]\n",
      " [0.00000000e+00 0.00000000e+00 5.51837768e+00 0.00000000e+00\n",
      "  0.00000000e+00]\n",
      " [0.00000000e+00 0.00000000e+00 0.00000000e+00 2.97101124e+00\n",
      "  0.00000000e+00]\n",
      " [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n",
      "  5.20743030e-16]]\n",
      "\n",
      "Matrix V^T:\n",
      "[[-5.59563918e-01 -4.28518976e-01 -4.43806660e-01 -4.59094344e-01\n",
      "  -3.09075625e-01]\n",
      " [ 3.18940578e-01 -2.34599607e-01 -3.11421604e-01 -3.88243601e-01\n",
      "   7.71701641e-01]\n",
      " [ 7.63873703e-01 -2.54797945e-01 -1.96543420e-01 -1.38288895e-01\n",
      "  -5.42053355e-01]\n",
      " [-4.07688131e-02 -7.27836419e-01 -2.75000156e-02  6.72836388e-01\n",
      "   1.22991852e-01]\n",
      " [-2.66300843e-16 -4.08248290e-01  8.16496581e-01 -4.08248290e-01\n",
      "   6.93889390e-17]]\n",
      "\n",
      "Verification that A equals UΣV^T:\n",
      "[[1.00000000e+00 2.00000000e+00 3.00000000e+00 4.00000000e+00\n",
      "  5.00000000e+00]\n",
      " [6.00000000e+00 7.00000000e+00 8.00000000e+00 9.00000000e+00\n",
      "  2.63677968e-16]\n",
      " [4.00000000e+00 3.00000000e+00 2.00000000e+00 1.00000000e+00\n",
      "  7.00000000e+00]\n",
      " [8.00000000e+00 7.00000000e+00 6.00000000e+00 5.00000000e+00\n",
      "  4.00000000e+00]\n",
      " [9.00000000e+00 1.00000000e+00 2.00000000e+00 3.00000000e+00\n",
      "  4.00000000e+00]]\n",
      "\n",
      "Rank 2 approximation of matrix A:\n",
      "[[ 3.81943198  2.34027736  2.34018701  2.34009665  2.83682046]\n",
      " [ 6.03343176  7.35664454  8.01024325  8.66384195 -0.07038383]\n",
      " [ 5.5188349   1.84995559  1.57623862  1.30252165  6.00384506]\n",
      " [ 7.70910926  5.81445321  6.00912887  6.20380454  4.3691328 ]\n",
      " [ 6.27199678  2.91883999  2.7536041   2.58836822  5.8078298 ]]\n",
      "\n",
      "Rank 3 approximation of matrix A:\n",
      "[[ 1.07042254  3.25723778  3.04750251  2.83776724  4.78754841]\n",
      " [ 6.02022376  7.36105021  8.01364165  8.66623308 -0.06101128]\n",
      " [ 3.96462061  2.36837978  1.97613534  1.58389091  7.10673297]\n",
      " [ 7.92947582  5.74094767  5.95242893  6.16391019  4.21275822]\n",
      " [ 9.05547497  1.99038216  2.03741984  2.08445753  3.83264243]]\n"
     ]
    }
   ],
   "source": [
    "import numpy as np\n",
    "\n",
    "# Matrix A obtained from the previous question\n",
    "A = np.array([[1, 2, 3, 4, 5],\n",
    "              [6, 7, 8, 9, 0],\n",
    "              [4, 3, 2, 1, 7],\n",
    "              [8, 7, 6, 5, 4],\n",
    "              [9, 1, 2, 3, 4]])\n",
    "\n",
    "# Perform Singular Value Decomposition (SVD)\n",
    "U, S, Vt = np.linalg.svd(A)\n",
    "\n",
    "# Create Σ matrix\n",
    "Sigma = np.zeros((A.shape[0], A.shape[1]))\n",
    "Sigma[:A.shape[0], :A.shape[0]] = np.diag(S)\n",
    "\n",
    "# Print matrices U, Σ, and Vt\n",
    "print(\"Matrix U:\")\n",
    "print(U)\n",
    "print(\"\\nMatrix Σ:\")\n",
    "print(Sigma)\n",
    "print(\"\\nMatrix V^T:\")\n",
    "print(Vt)\n",
    "\n",
    "# Verify A equals the product of U, Σ, and V^T\n",
    "A_reconstructed = np.dot(U, np.dot(Sigma, Vt))\n",
    "print(\"\\nVerification that A equals UΣV^T:\")\n",
    "print(A_reconstructed)\n",
    "\n",
    "# Rank 2 approximation of matrix A\n",
    "A_rank_2 = np.dot(U[:, :2], np.dot(Sigma[:2, :2], Vt[:2, :]))\n",
    "print(\"\\nRank 2 approximation of matrix A:\")\n",
    "print(A_rank_2)\n",
    "\n",
    "# Rank 3 approximation of matrix A\n",
    "A_rank_3 = np.dot(U[:, :3], np.dot(Sigma[:3, :3], Vt[:3, :]))\n",
    "print(\"\\nRank 3 approximation of matrix A:\")\n",
    "print(A_rank_3)\n"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
